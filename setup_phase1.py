#!/usr/bin/env python3
"""
Setup script for Phase 1 of the Multi-User Trading Platform.
This script will help you set up the database and core API framework.
"""

import os
import sys
import subprocess
from pathlib import Path


def print_header(title):
    """Print a formatted header."""
    print(f"\n{'='*60}")
    print(f" {title}")
    print(f"{'='*60}")


def print_step(step, description):
    """Print a formatted step."""
    print(f"\n[Step {step}] {description}")
    print("-" * 50)


def run_command(command, description):
    """Run a command and handle errors."""
    print(f"Running: {command}")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        if result.stdout:
            print(result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        print(f"Error: {e}")
        if e.stderr:
            print(f"Error output: {e.stderr}")
        return False


def check_python_version():
    """Check if Python version is compatible."""
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("Error: Python 3.8 or higher is required!")
        return False
    print(f"✓ Python {version.major}.{version.minor}.{version.micro} detected")
    return True


def install_dependencies():
    """Install required Python packages."""
    print("Installing dependencies from requirements.txt...")
    return run_command("pip install -r requirements.txt", "Installing dependencies")


def generate_env_file():
    """Generate .env file if it doesn't exist."""
    env_file = Path(".env")
    if env_file.exists():
        print("✓ .env file already exists")
        return True
    
    print("Creating .env file with default configuration...")
    
    # Generate encryption key
    from cryptography.fernet import Fernet
    encryption_key = Fernet.generate_key().decode()
    jwt_key = Fernet.generate_key().decode()
    
    env_content = f"""# Multi-User Trading Platform Configuration
# Generated by setup script

# Database settings
DATABASE_URL=sqlite:///trading_platform.db
DATABASE_ENCRYPTION_KEY={encryption_key}

# Flask settings
FLASK_ENV=development
SECRET_KEY=dev-secret-key-change-in-production

# JWT settings
JWT_SECRET_KEY={jwt_key}

# API settings
API_HOST=0.0.0.0
API_PORT=5000

# Telegram settings (update with your values)
TELEGRAM_BOT_TOKEN=your-bot-token-here
TELEGRAM_CHANNEL_ID=-1002526280469

# Quotex settings
QUOTEX_API_TIMEOUT=30
QUOTEX_RECONNECT_ATTEMPTS=3

# Logging
LOG_LEVEL=DEBUG
"""
    
    try:
        with open(env_file, 'w') as f:
            f.write(env_content)
        print("✓ .env file created successfully")
        return True
    except Exception as e:
        print(f"Error creating .env file: {e}")
        return False


def initialize_database():
    """Initialize the database."""
    print("Initializing database...")
    return run_command("python app.py --init-db", "Database initialization")


def test_api():
    """Test if the API is working."""
    print("Testing API endpoints...")
    
    # Try to import the app
    try:
        from api import create_app
        app = create_app('development')
        
        with app.test_client() as client:
            # Test health endpoint
            response = client.get('/api/v1/health')
            if response.status_code == 200:
                print("✓ Health endpoint working")
            else:
                print(f"✗ Health endpoint failed: {response.status_code}")
                return False
                
            # Test info endpoint
            response = client.get('/api/v1/')
            if response.status_code == 200:
                print("✓ API info endpoint working")
            else:
                print(f"✗ API info endpoint failed: {response.status_code}")
                return False
        
        print("✓ All API endpoints are working correctly")
        return True
        
    except Exception as e:
        print(f"✗ API test failed: {e}")
        return False


def main():
    """Main setup function."""
    print_header("Multi-User Trading Platform - Phase 1 Setup")
    
    print("This script will set up Phase 1 of the development plan:")
    print("• Database schema and models")
    print("• Core API framework")
    print("• Authentication system")
    print("• Configuration management")
    
    # Check Python version
    print_step(1, "Checking Python version")
    if not check_python_version():
        sys.exit(1)
    
    # Install dependencies
    print_step(2, "Installing dependencies")
    if not install_dependencies():
        print("Failed to install dependencies. Please check the error above.")
        sys.exit(1)
    
    # Generate .env file
    print_step(3, "Setting up configuration")
    if not generate_env_file():
        print("Failed to create .env file. Please create it manually.")
        sys.exit(1)
    
    # Initialize database
    print_step(4, "Initializing database")
    if not initialize_database():
        print("Failed to initialize database. Please check the error above.")
        sys.exit(1)
    
    # Test API
    print_step(5, "Testing API")
    if not test_api():
        print("API test failed. Please check the configuration.")
        sys.exit(1)
    
    # Success message
    print_header("Setup Complete!")
    print("✓ Phase 1 setup completed successfully!")
    print("\nNext steps:")
    print("1. Review and update the .env file with your settings")
    print("2. Start the API server: python app.py")
    print("3. Test the API at: http://localhost:5000/api/v1/health")
    print("4. Proceed to Phase 2 implementation")
    
    print("\nDefault admin user created:")
    print("• Username: admin")
    print("• Email: admin@trading-platform.com")
    print("• Password: admin123")
    print("• Please change the password after first login!")
    
    print("\nAPI Documentation:")
    print("• Health Check: GET /api/v1/health")
    print("• API Info: GET /api/v1/")
    print("• Future endpoints will be added in Phase 2")


if __name__ == '__main__':
    main() 